<?php

namespace Tests\Feature;

use App\Models\PaymentMethod;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PaymentMethodStoreTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->withExceptionHandling();
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_it_fail_if_user_unauthenticate()
    {
        $response = $this->postJson('api/payment-methods')->assertStatus(401);
    }

    public function test_it_require_a_token()
    {
        $user = User::factory()->create();
        $this->jsonAs($user, 'post', 'api/payment-methods')->assertJsonValidationErrors('token');
    }

    public function test_it_can_succesfully_add_a_card()
    {
        $this->withExceptionHandling();
        $user = User::factory()->create();
        $res = $this->jsonAs($user, 'post', 'api/payment-methods', [
            'token' => 'tok_visa'
        ]);
        $this->assertDatabaseHas('payment_methods', [
            'user_id' => $user->id,
            'card_type' => "Visa"
        ]);
    }

    public function test_it_return_created_card()
    {
        $this->withExceptionHandling();
        $user = User::factory()->create();
        $res = $this->jsonAs($user, 'post', 'api/payment-methods', [
            'token' => 'tok_visa'
        ])->assertJsonFragment([
            'card_type' => 'Visa'
        ]);

    }

    public function test_it_set_the_new_created_card_default()
    {
        $user = User::factory()->create();
        $this->jsonAs($user, 'post', 'api/payment-methods', [
            'token' => 'tok_visa'
        ]);
        $firstCard = $user->paymentMethods()->first();
        $this->jsonAs($user, 'post', 'api/payment-methods', [
            'token' => 'tok_visa'
        ]);
        $lastCard = $user->paymentMethods()->latest()->first();
        $this->assertFalse($firstCard->refresh()->is_default);
        $this->assertTrue($lastCard->is_default);

    }
}
